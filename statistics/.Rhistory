pesTracks$widthDelta <- ifelse(
pesTracks$widthMeasured == 0, 0,
abs(pesTracks$width - averageWidth)/pesTracks$widthUncertainty)
pesTracks$widthDelta <- 2.0*pesTracks$widthDelta/max(pesTracks$widthDelta)
pesTracks$lengthDelta <- ifelse(
pesTracks$lengthMeasured == 0, 0,
abs(pesTracks$length - averageLength)/pesTracks$lengthUncertainty)
pesTracks$lengthDelta <- pesTracks$lengthDelta/max(pesTracks$lengthDelta)
subsetTracks <- rbind(pesTracks, manusTracks)
TRACK_LENGTH_WEIGHT <- 1.0
WIDTH_WEIGHT <- 2.5
LENGTH_WEIGHT <- 2.0
targets <- dplyr::inner_join(priorities, errors, by=c('UID'))
#targets <- dplyr::filter(targets, targets$Preserved == 1 | targets$Cast == 1)
targets <- dplyr::inner_join(targets, subsetTracks, by=c('UID' = 'uid'))
targets$Priority <- targets$Priority/max(targets$Priority)
targets$Priority <- (targets$Width.Deviation + targets$Length.Deviation)*(
TRACK_LENGTH_WEIGHT*targets$Priority +
WIDTH_WEIGHT*targets$lengthDelta +
LENGTH_WEIGHT*targets$widthDelta)
targets$Priority <- targets$Priority/max(targets$Priority)
targets$Priority <- dplyr::arrange(targets, dplyr::desc(targets$Priority))
write.csv(targets, 'output/Track_Priorities.csv')
View(targets)
View(targets)
View(targets)
View(targets)
library(dplyr)
priorities <- read.csv("/Users/scott/Dropbox/a16/Analysis/StatisticsAnalyzer/Track-Priority.csv")
errors <- read.csv("/Users/scott/Dropbox/a16/Analysis/ComparisonAnalyzer/Error-Deviations.csv")
errors <- dplyr::select(errors, -Fingerprint)
# Create a connection to the tracks database and load the tracks database table
conn <- RSQLite::dbConnect(RSQLite::SQLite(), dbname="input/tracks.vdb")
sitemaps <- RSQLite::dbReadTable(conn, "sitemaps")
sourceTracks <- RSQLite::dbReadTable(conn, "tracks")
RSQLite::dbDisconnect(conn)
subsetTracks <- sourceTracks[c(
'uid', 'pes',
'width', 'widthMeasured',
'length', 'lengthMeasured',
'widthUncertainty', 'lengthUncertainty')]
subsetTracks <- dplyr::filter(subsetTracks, subsetTracks$width > 0 & subsetTracks$length > 0)
averageWidth <- mean(subsetTracks$width)
averageLength <- mean(subsetTracks$length)
manusTracks <- dplyr::filter(subsetTracks, subsetTracks$pes == 0)
manusTracks$widthDelta <- ifelse(
manusTracks$widthMeasured == 0, 0,
abs(manusTracks$width - averageWidth)/manusTracks$widthUncertainty)
manusTracks$widthDelta <- manusTracks$widthDelta/max(manusTracks$widthDelta)
manusTracks$lengthDelta <- ifelse(
manusTracks$lengthMeasured == 0, 0,
abs(manusTracks$length - averageLength)/manusTracks$lengthUncertainty)
manusTracks$lengthDelta <- manusTracks$lengthDelta/max(manusTracks$lengthDelta)
pesTracks <- dplyr::filter(subsetTracks, subsetTracks$pes == 1)
pesTracks$widthDelta <- ifelse(
pesTracks$widthMeasured == 0, 0,
abs(pesTracks$width - averageWidth)/pesTracks$widthUncertainty)
pesTracks$widthDelta <- 2.0*pesTracks$widthDelta/max(pesTracks$widthDelta)
pesTracks$lengthDelta <- ifelse(
pesTracks$lengthMeasured == 0, 0,
abs(pesTracks$length - averageLength)/pesTracks$lengthUncertainty)
pesTracks$lengthDelta <- pesTracks$lengthDelta/max(pesTracks$lengthDelta)
subsetTracks <- rbind(pesTracks, manusTracks)
TRACK_LENGTH_WEIGHT <- 1.0
WIDTH_WEIGHT <- 2.5
LENGTH_WEIGHT <- 2.0
targets <- dplyr::inner_join(priorities, errors, by=c('UID'))
#targets <- dplyr::filter(targets, targets$Preserved == 1 | targets$Cast == 1)
targets <- dplyr::inner_join(targets, subsetTracks, by=c('UID' = 'uid'))
targets$Priority <- targets$Priority/max(targets$Priority)
targets$Priority <- (targets$Width.Deviation + targets$Length.Deviation)*(
TRACK_LENGTH_WEIGHT*targets$Priority +
WIDTH_WEIGHT*targets$lengthDelta +
LENGTH_WEIGHT*targets$widthDelta)
targets$Priority <- targets$Priority/max(targets$Priority)
targets$Priority <- dplyr::arrange(targets, dplyr::desc('Priority'))
write.csv(targets, 'output/Track_Priorities.csv')
library(dplyr)
priorities <- read.csv("/Users/scott/Dropbox/a16/Analysis/StatisticsAnalyzer/Track-Priority.csv")
errors <- read.csv("/Users/scott/Dropbox/a16/Analysis/ComparisonAnalyzer/Error-Deviations.csv")
errors <- dplyr::select(errors, -Fingerprint)
# Create a connection to the tracks database and load the tracks database table
conn <- RSQLite::dbConnect(RSQLite::SQLite(), dbname="input/tracks.vdb")
sitemaps <- RSQLite::dbReadTable(conn, "sitemaps")
sourceTracks <- RSQLite::dbReadTable(conn, "tracks")
RSQLite::dbDisconnect(conn)
subsetTracks <- sourceTracks[c(
'uid', 'pes',
'width', 'widthMeasured',
'length', 'lengthMeasured',
'widthUncertainty', 'lengthUncertainty')]
subsetTracks <- dplyr::filter(subsetTracks, subsetTracks$width > 0 & subsetTracks$length > 0)
averageWidth <- mean(subsetTracks$width)
averageLength <- mean(subsetTracks$length)
manusTracks <- dplyr::filter(subsetTracks, subsetTracks$pes == 0)
manusTracks$widthDelta <- ifelse(
manusTracks$widthMeasured == 0, 0,
abs(manusTracks$width - averageWidth)/manusTracks$widthUncertainty)
manusTracks$widthDelta <- manusTracks$widthDelta/max(manusTracks$widthDelta)
manusTracks$lengthDelta <- ifelse(
manusTracks$lengthMeasured == 0, 0,
abs(manusTracks$length - averageLength)/manusTracks$lengthUncertainty)
manusTracks$lengthDelta <- manusTracks$lengthDelta/max(manusTracks$lengthDelta)
pesTracks <- dplyr::filter(subsetTracks, subsetTracks$pes == 1)
pesTracks$widthDelta <- ifelse(
pesTracks$widthMeasured == 0, 0,
abs(pesTracks$width - averageWidth)/pesTracks$widthUncertainty)
pesTracks$widthDelta <- 2.0*pesTracks$widthDelta/max(pesTracks$widthDelta)
pesTracks$lengthDelta <- ifelse(
pesTracks$lengthMeasured == 0, 0,
abs(pesTracks$length - averageLength)/pesTracks$lengthUncertainty)
pesTracks$lengthDelta <- pesTracks$lengthDelta/max(pesTracks$lengthDelta)
subsetTracks <- rbind(pesTracks, manusTracks)
TRACK_LENGTH_WEIGHT <- 1.0
WIDTH_WEIGHT <- 2.5
LENGTH_WEIGHT <- 2.0
targets <- dplyr::inner_join(priorities, errors, by=c('UID'))
#targets <- dplyr::filter(targets, targets$Preserved == 1 | targets$Cast == 1)
targets <- dplyr::inner_join(targets, subsetTracks, by=c('UID' = 'uid'))
targets$Priority <- targets$Priority/max(targets$Priority)
targets$Priority <- (targets$Width.Deviation + targets$Length.Deviation)*(
TRACK_LENGTH_WEIGHT*targets$Priority +
WIDTH_WEIGHT*targets$lengthDelta +
LENGTH_WEIGHT*targets$widthDelta)
targets$Priority <- targets$Priority/max(targets$Priority)
targets <- dplyr::arrange(targets, dplyr::desc(targets$Priority))
write.csv(targets, 'output/Track_Priorities.csv')
View(targets)
View(targets)
library(RSQLite)
library(dplyr)
library(ggplot2)
source('src/support/TrackUtils.R')
# Create a connection to the tracks database and load the tracks database table
conn <- RSQLite::dbConnect(RSQLite::SQLite(), dbname="input/tracks.vdb")
sitemaps <- RSQLite::dbReadTable(conn, "sitemaps")
sourceTracks <- RSQLite::dbReadTable(conn, "tracks")
RSQLite::dbDisconnect(conn)
conn <- RSQLite::dbConnect(RSQLite::SQLite(), dbname="input/analysis.vdb")
analysisTracks <- RSQLite::dbReadTable(conn, "tracks")
RSQLite::dbDisconnect(conn)
conn <- NULL
allTracks <- dplyr::inner_join(sourceTracks, analysisTracks, by=c('uid'))
# Add the fingerprint to the columns of data
allTracks$fingerprint <- generateFingerprints(allTracks)
# Modify the tracks table for analysis
hidden <- dplyr::filter(allTracks, allTracks$hidden == 1)
incomplete <- dplyr::filter(allTracks, bitwAnd(allTracks$sourceFlags, 1) == 0)
tracks <- dplyr::setdiff(allTracks, hidden)
# Grab non-hidden tracks that
zeroTracks <- dplyr::filter(allTracks, allTracks$width == 0.0 | allTracks$length == 0.0)
tracks <- dplyr::setdiff(tracks, zeroTracks)
manusTracks <- tracks[which(tracks$pes == FALSE), ]
pesTracks <- tracks[which(tracks$pes == TRUE), ]
# [PLOT]: Length vs Width
pdf("output/Track-Basics.pdf", useDingbats=FALSE)
ggplot(pesTracks, aes(width, length)) + geom_point()
ggplot(manusTracks, aes(width, length)) + geom_point()
ggplot(tracks, aes(strideLength, paceLength)) + geom_point()
ggplot(tracks, aes(strideLength, simpleGauge)) + geom_point()
ggplot(tracks, aes(width, strideLength)) + geom_point()
ggplot(tracks, aes(width, simpleGauge)) + geom_point()
ggplot(tracks, aes(width)) + geom_histogram()
# Finalized PDF printing
dev.off()
columnsToKeep <- c('width', 'rotation', 'strideLength', 'paceLength', 'headingAngle', 'simpleGauge')
subsetTracks <- tracks[c('uid', columnsToKeep)]
subsetTracks <- na.omit(subsetTracks)
clusterTracks <- scale(subsetTracks[columnsToKeep])
wss <- (nrow(clusterTracks)-1)*sum(apply(clusterTracks,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(clusterTracks, centers=i)$withinss)
plot.new()
plot(1:15, wss, type="b", xlab="Number of Clusters", ylab="Within groups sum of squares")
fit <- kmeans(clusterTracks, 5)
aggregate(clusterTracks,by=list(fit$cluster),FUN=mean)
subsetTracks <- data.frame(subsetTracks, fit$cluster)
plot.new()
plot(fit[c("strideLength", "simpleGauge")], col=fit$cluster)
points(fit$centers[,c("strideLength", "simpleGauge")], col=1:5, pch=8, cex=2)
result <- subsetTracks[c('uid', 'fit.cluster')]
result <- dplyr::select(result, uid, cluster = fit.cluster)
write.csv(result, 'output/Clustered-Tracks.csv')
library(dplyr)
priorities <- read.csv("/Users/scott/Dropbox/a16/Analysis/StatisticsAnalyzer/Track-Priority.csv")
errors <- read.csv("/Users/scott/Dropbox/a16/Analysis/ComparisonAnalyzer/Error-Deviations.csv")
errors <- dplyr::select(errors, -Fingerprint)
# Create a connection to the tracks database and load the tracks database table
conn <- RSQLite::dbConnect(RSQLite::SQLite(), dbname="input/tracks.vdb")
sitemaps <- RSQLite::dbReadTable(conn, "sitemaps")
sourceTracks <- RSQLite::dbReadTable(conn, "tracks")
RSQLite::dbDisconnect(conn)
subsetTracks <- sourceTracks[c(
'uid', 'pes',
'width', 'widthMeasured',
'length', 'lengthMeasured',
'widthUncertainty', 'lengthUncertainty')]
subsetTracks <- dplyr::filter(subsetTracks, subsetTracks$width > 0 & subsetTracks$length > 0)
averageWidth <- mean(subsetTracks$width)
averageLength <- mean(subsetTracks$length)
manusTracks <- dplyr::filter(subsetTracks, subsetTracks$pes == 0)
manusTracks$widthDelta <- ifelse(
manusTracks$widthMeasured == 0, 0,
abs(manusTracks$width - averageWidth)/manusTracks$widthUncertainty)
manusTracks$widthDelta <- manusTracks$widthDelta/max(manusTracks$widthDelta)
manusTracks$lengthDelta <- ifelse(
manusTracks$lengthMeasured == 0, 0,
abs(manusTracks$length - averageLength)/manusTracks$lengthUncertainty)
manusTracks$lengthDelta <- manusTracks$lengthDelta/max(manusTracks$lengthDelta)
pesTracks <- dplyr::filter(subsetTracks, subsetTracks$pes == 1)
pesTracks$widthDelta <- ifelse(
pesTracks$widthMeasured == 0, 0,
abs(pesTracks$width - averageWidth)/pesTracks$widthUncertainty)
pesTracks$widthDelta <- 2.0*pesTracks$widthDelta/max(pesTracks$widthDelta)
pesTracks$lengthDelta <- ifelse(
pesTracks$lengthMeasured == 0, 0,
abs(pesTracks$length - averageLength)/pesTracks$lengthUncertainty)
pesTracks$lengthDelta <- pesTracks$lengthDelta/max(pesTracks$lengthDelta)
subsetTracks <- rbind(pesTracks, manusTracks)
TRACK_LENGTH_WEIGHT <- 1.0
WIDTH_WEIGHT <- 2.5
LENGTH_WEIGHT <- 2.0
targets <- dplyr::inner_join(priorities, errors, by=c('UID'))
#targets <- dplyr::filter(targets, targets$Preserved == 1 | targets$Cast == 1)
targets <- dplyr::inner_join(targets, subsetTracks, by=c('UID' = 'uid'))
targets$Priority <- targets$Priority/max(targets$Priority)
targets$Priority <- (targets$Width.Deviation + targets$Length.Deviation)*(
TRACK_LENGTH_WEIGHT*targets$Priority +
WIDTH_WEIGHT*targets$lengthDelta +
LENGTH_WEIGHT*targets$widthDelta)
targets$Priority <- targets$Priority/max(targets$Priority)
targets <- dplyr::arrange(targets, dplyr::desc(targets$Priority))
write.csv(targets, 'output/Track_Priorities.csv')
View(targets)
View(targets)
sameTracks <- dplyer::filter(sourceTracks, sourceTracks$widthMeasured == sourceTracks$lengthMeasured)
library(dplyr)
priorities <- read.csv("/Users/scott/Dropbox/a16/Analysis/StatisticsAnalyzer/Track-Priority.csv")
errors <- read.csv("/Users/scott/Dropbox/a16/Analysis/ComparisonAnalyzer/Error-Deviations.csv")
errors <- dplyr::select(errors, -Fingerprint)
# Create a connection to the tracks database and load the tracks database table
conn <- RSQLite::dbConnect(RSQLite::SQLite(), dbname="input/tracks.vdb")
sitemaps <- RSQLite::dbReadTable(conn, "sitemaps")
sourceTracks <- RSQLite::dbReadTable(conn, "tracks")
RSQLite::dbDisconnect(conn)
sameTracks <- dplyer::filter(sourceTracks, sourceTracks$widthMeasured == sourceTracks$lengthMeasured)
subsetTracks <- sourceTracks[c(
'uid', 'pes',
'width', 'widthMeasured',
'length', 'lengthMeasured',
'widthUncertainty', 'lengthUncertainty')]
subsetTracks <- dplyr::filter(subsetTracks, subsetTracks$width > 0 & subsetTracks$length > 0)
averageWidth <- mean(subsetTracks$width)
averageLength <- mean(subsetTracks$length)
manusTracks <- dplyr::filter(subsetTracks, subsetTracks$pes == 0)
manusTracks$widthDelta <- ifelse(
manusTracks$widthMeasured == 0, 0,
abs(manusTracks$width - averageWidth)/manusTracks$widthUncertainty)
manusTracks$widthDelta <- manusTracks$widthDelta/max(manusTracks$widthDelta)
manusTracks$lengthDelta <- ifelse(
manusTracks$lengthMeasured == 0, 0,
abs(manusTracks$length - averageLength)/manusTracks$lengthUncertainty)
manusTracks$lengthDelta <- manusTracks$lengthDelta/max(manusTracks$lengthDelta)
pesTracks <- dplyr::filter(subsetTracks, subsetTracks$pes == 1)
pesTracks$widthDelta <- ifelse(
pesTracks$widthMeasured == 0, 0,
abs(pesTracks$width - averageWidth)/pesTracks$widthUncertainty)
pesTracks$widthDelta <- 2.0*pesTracks$widthDelta/max(pesTracks$widthDelta)
pesTracks$lengthDelta <- ifelse(
pesTracks$lengthMeasured == 0, 0,
abs(pesTracks$length - averageLength)/pesTracks$lengthUncertainty)
pesTracks$lengthDelta <- pesTracks$lengthDelta/max(pesTracks$lengthDelta)
subsetTracks <- rbind(pesTracks, manusTracks)
TRACK_LENGTH_WEIGHT <- 1.0
WIDTH_WEIGHT <- 2.5
LENGTH_WEIGHT <- 2.0
targets <- dplyr::inner_join(priorities, errors, by=c('UID'))
#targets <- dplyr::filter(targets, targets$Preserved == 1 | targets$Cast == 1)
targets <- dplyr::inner_join(targets, subsetTracks, by=c('UID' = 'uid'))
targets$Priority <- targets$Priority/max(targets$Priority)
targets$Priority <- (targets$Width.Deviation + targets$Length.Deviation)*(
TRACK_LENGTH_WEIGHT*targets$Priority +
WIDTH_WEIGHT*targets$lengthDelta +
LENGTH_WEIGHT*targets$widthDelta)
targets$Priority <- targets$Priority/max(targets$Priority)
targets <- dplyr::arrange(targets, dplyr::desc(targets$Priority))
write.csv(targets, 'output/Track_Priorities.csv')
sameTracks <- dplyer::filter(sourceTracks, sourceTracks$widthMeasured == sourceTracks$lengthMeasured)
sameTracks <- dplyr::filter(sourceTracks, sourceTracks$widthMeasured == sourceTracks$lengthMeasured)
View(sameTracks)
View(sameTracks)
library(dplyr)
priorities <- read.csv("/Users/scott/Dropbox/a16/Analysis/StatisticsAnalyzer/Track-Priority.csv")
errors <- read.csv("/Users/scott/Dropbox/a16/Analysis/ComparisonAnalyzer/Error-Deviations.csv")
errors <- dplyr::select(errors, -Fingerprint)
# Create a connection to the tracks database and load the tracks database table
conn <- RSQLite::dbConnect(RSQLite::SQLite(), dbname="input/tracks.vdb")
sitemaps <- RSQLite::dbReadTable(conn, "sitemaps")
sourceTracks <- RSQLite::dbReadTable(conn, "tracks")
RSQLite::dbDisconnect(conn)
subsetTracks <- sourceTracks[c(
'uid', 'pes',
'width', 'widthMeasured',
'length', 'lengthMeasured',
'widthUncertainty', 'lengthUncertainty')]
subsetTracks <- dplyr::filter(subsetTracks, subsetTracks$width > 0 & subsetTracks$length > 0)
sameTracks <- dplyr::filter(subsetTracks, subsetTracks$widthMeasured == subsetTracks$lengthMeasured)
averageWidth <- mean(subsetTracks$width)
averageLength <- mean(subsetTracks$length)
manusTracks <- dplyr::filter(subsetTracks, subsetTracks$pes == 0)
manusTracks$widthDelta <- ifelse(
manusTracks$widthMeasured == 0, 0,
abs(manusTracks$width - averageWidth)/manusTracks$widthUncertainty)
manusTracks$widthDelta <- manusTracks$widthDelta/max(manusTracks$widthDelta)
manusTracks$lengthDelta <- ifelse(
manusTracks$lengthMeasured == 0, 0,
abs(manusTracks$length - averageLength)/manusTracks$lengthUncertainty)
manusTracks$lengthDelta <- manusTracks$lengthDelta/max(manusTracks$lengthDelta)
pesTracks <- dplyr::filter(subsetTracks, subsetTracks$pes == 1)
pesTracks$widthDelta <- ifelse(
pesTracks$widthMeasured == 0, 0,
abs(pesTracks$width - averageWidth)/pesTracks$widthUncertainty)
pesTracks$widthDelta <- 2.0*pesTracks$widthDelta/max(pesTracks$widthDelta)
pesTracks$lengthDelta <- ifelse(
pesTracks$lengthMeasured == 0, 0,
abs(pesTracks$length - averageLength)/pesTracks$lengthUncertainty)
pesTracks$lengthDelta <- pesTracks$lengthDelta/max(pesTracks$lengthDelta)
subsetTracks <- rbind(pesTracks, manusTracks)
TRACK_LENGTH_WEIGHT <- 1.0
WIDTH_WEIGHT <- 2.5
LENGTH_WEIGHT <- 2.0
targets <- dplyr::inner_join(priorities, errors, by=c('UID'))
#targets <- dplyr::filter(targets, targets$Preserved == 1 | targets$Cast == 1)
targets <- dplyr::inner_join(targets, subsetTracks, by=c('UID' = 'uid'))
targets$Priority <- targets$Priority/max(targets$Priority)
targets$Priority <- (targets$Width.Deviation + targets$Length.Deviation)*(
TRACK_LENGTH_WEIGHT*targets$Priority +
WIDTH_WEIGHT*targets$lengthDelta +
LENGTH_WEIGHT*targets$widthDelta)
targets$Priority <- targets$Priority/max(targets$Priority)
targets <- dplyr::arrange(targets, dplyr::desc(targets$Priority))
write.csv(targets, 'output/Track_Priorities.csv')
View(sameTracks)
View(sameTracks)
library(dplyr)
priorities <- read.csv("/Users/scott/Dropbox/a16/Analysis/StatisticsAnalyzer/Track-Priority.csv")
errors <- read.csv("/Users/scott/Dropbox/a16/Analysis/ComparisonAnalyzer/Error-Deviations.csv")
errors <- dplyr::select(errors, -Fingerprint)
# Create a connection to the tracks database and load the tracks database table
conn <- RSQLite::dbConnect(RSQLite::SQLite(), dbname="input/tracks.vdb")
sitemaps <- RSQLite::dbReadTable(conn, "sitemaps")
sourceTracks <- RSQLite::dbReadTable(conn, "tracks")
RSQLite::dbDisconnect(conn)
subsetTracks <- sourceTracks[c(
'uid', 'pes',
'width', 'widthMeasured',
'length', 'lengthMeasured',
'widthUncertainty', 'lengthUncertainty')]
subsetTracks <- dplyr::filter(subsetTracks, subsetTracks$width > 0 & subsetTracks$length > 0)
sameTracks <- dplyr::filter(subsetTracks,
subsetTracks$widthMeasured > 0 &
subsetTracks$lengthMeasured > 0 &
subsetTracks$widthMeasured == subsetTracks$lengthMeasured)
averageWidth <- mean(subsetTracks$width)
averageLength <- mean(subsetTracks$length)
manusTracks <- dplyr::filter(subsetTracks, subsetTracks$pes == 0)
manusTracks$widthDelta <- ifelse(
manusTracks$widthMeasured == 0, 0,
abs(manusTracks$width - averageWidth)/manusTracks$widthUncertainty)
manusTracks$widthDelta <- manusTracks$widthDelta/max(manusTracks$widthDelta)
manusTracks$lengthDelta <- ifelse(
manusTracks$lengthMeasured == 0, 0,
abs(manusTracks$length - averageLength)/manusTracks$lengthUncertainty)
manusTracks$lengthDelta <- manusTracks$lengthDelta/max(manusTracks$lengthDelta)
pesTracks <- dplyr::filter(subsetTracks, subsetTracks$pes == 1)
pesTracks$widthDelta <- ifelse(
pesTracks$widthMeasured == 0, 0,
abs(pesTracks$width - averageWidth)/pesTracks$widthUncertainty)
pesTracks$widthDelta <- 2.0*pesTracks$widthDelta/max(pesTracks$widthDelta)
pesTracks$lengthDelta <- ifelse(
pesTracks$lengthMeasured == 0, 0,
abs(pesTracks$length - averageLength)/pesTracks$lengthUncertainty)
pesTracks$lengthDelta <- pesTracks$lengthDelta/max(pesTracks$lengthDelta)
subsetTracks <- rbind(pesTracks, manusTracks)
TRACK_LENGTH_WEIGHT <- 1.0
WIDTH_WEIGHT <- 2.5
LENGTH_WEIGHT <- 2.0
targets <- dplyr::inner_join(priorities, errors, by=c('UID'))
#targets <- dplyr::filter(targets, targets$Preserved == 1 | targets$Cast == 1)
targets <- dplyr::inner_join(targets, subsetTracks, by=c('UID' = 'uid'))
targets$Priority <- targets$Priority/max(targets$Priority)
targets$Priority <- (targets$Width.Deviation + targets$Length.Deviation)*(
TRACK_LENGTH_WEIGHT*targets$Priority +
WIDTH_WEIGHT*targets$lengthDelta +
LENGTH_WEIGHT*targets$widthDelta)
targets$Priority <- targets$Priority/max(targets$Priority)
targets <- dplyr::arrange(targets, dplyr::desc(targets$Priority))
write.csv(targets, 'output/Track_Priorities.csv')
View(sameTracks)
View(sameTracks)
library(dplyr)
priorities <- read.csv("/Users/scott/Dropbox/a16/Analysis/StatisticsAnalyzer/Track-Priority.csv")
errors <- read.csv("/Users/scott/Dropbox/a16/Analysis/ComparisonAnalyzer/Error-Deviations.csv")
errors <- dplyr::select(errors, -Fingerprint)
# Create a connection to the tracks database and load the tracks database table
conn <- RSQLite::dbConnect(RSQLite::SQLite(), dbname="input/tracks.vdb")
sitemaps <- RSQLite::dbReadTable(conn, "sitemaps")
sourceTracks <- RSQLite::dbReadTable(conn, "tracks")
RSQLite::dbDisconnect(conn)
subsetTracks <- sourceTracks[c(
'uid', 'pes',
'width', 'widthMeasured',
'length', 'lengthMeasured',
'widthUncertainty', 'lengthUncertainty')]
subsetTracks <- dplyr::filter(subsetTracks, subsetTracks$width > 0 & subsetTracks$length > 0)
sameTracks <- dplyr::filter(subsetTracks,
subsetTracks$widthMeasured > 0 &
subsetTracks$lengthMeasured > 0 &
subsetTracks$widthMeasured == subsetTracks$lengthMeasured)
sameTracks <- dplyr::inner_join(sameTracks, priorities, by=c('uid' = 'UID'))
averageWidth <- mean(subsetTracks$width)
averageLength <- mean(subsetTracks$length)
manusTracks <- dplyr::filter(subsetTracks, subsetTracks$pes == 0)
manusTracks$widthDelta <- ifelse(
manusTracks$widthMeasured == 0, 0,
abs(manusTracks$width - averageWidth)/manusTracks$widthUncertainty)
manusTracks$widthDelta <- manusTracks$widthDelta/max(manusTracks$widthDelta)
manusTracks$lengthDelta <- ifelse(
manusTracks$lengthMeasured == 0, 0,
abs(manusTracks$length - averageLength)/manusTracks$lengthUncertainty)
manusTracks$lengthDelta <- manusTracks$lengthDelta/max(manusTracks$lengthDelta)
pesTracks <- dplyr::filter(subsetTracks, subsetTracks$pes == 1)
pesTracks$widthDelta <- ifelse(
pesTracks$widthMeasured == 0, 0,
abs(pesTracks$width - averageWidth)/pesTracks$widthUncertainty)
pesTracks$widthDelta <- 2.0*pesTracks$widthDelta/max(pesTracks$widthDelta)
pesTracks$lengthDelta <- ifelse(
pesTracks$lengthMeasured == 0, 0,
abs(pesTracks$length - averageLength)/pesTracks$lengthUncertainty)
pesTracks$lengthDelta <- pesTracks$lengthDelta/max(pesTracks$lengthDelta)
subsetTracks <- rbind(pesTracks, manusTracks)
TRACK_LENGTH_WEIGHT <- 1.0
WIDTH_WEIGHT <- 2.5
LENGTH_WEIGHT <- 2.0
targets <- dplyr::inner_join(priorities, errors, by=c('UID'))
#targets <- dplyr::filter(targets, targets$Preserved == 1 | targets$Cast == 1)
targets <- dplyr::inner_join(targets, subsetTracks, by=c('UID' = 'uid'))
targets$Priority <- targets$Priority/max(targets$Priority)
targets$Priority <- (targets$Width.Deviation + targets$Length.Deviation)*(
TRACK_LENGTH_WEIGHT*targets$Priority +
WIDTH_WEIGHT*targets$lengthDelta +
LENGTH_WEIGHT*targets$widthDelta)
targets$Priority <- targets$Priority/max(targets$Priority)
targets <- dplyr::arrange(targets, dplyr::desc(targets$Priority))
write.csv(targets, 'output/Track_Priorities.csv')
View(sameTracks)
View(sameTracks)
library(dplyr)
priorities <- read.csv("/Users/scott/Dropbox/a16/Analysis/StatisticsAnalyzer/Track-Priority.csv")
errors <- read.csv("/Users/scott/Dropbox/a16/Analysis/ComparisonAnalyzer/Error-Deviations.csv")
errors <- dplyr::select(errors, -Fingerprint)
# Create a connection to the tracks database and load the tracks database table
conn <- RSQLite::dbConnect(RSQLite::SQLite(), dbname="input/tracks.vdb")
sitemaps <- RSQLite::dbReadTable(conn, "sitemaps")
sourceTracks <- RSQLite::dbReadTable(conn, "tracks")
RSQLite::dbDisconnect(conn)
subsetTracks <- sourceTracks[c(
'uid', 'pes',
'width', 'widthMeasured',
'length', 'lengthMeasured',
'widthUncertainty', 'lengthUncertainty')]
subsetTracks <- dplyr::filter(subsetTracks, subsetTracks$width > 0 & subsetTracks$length > 0)
sameTracks <- dplyr::filter(subsetTracks,
subsetTracks$widthMeasured > 0 &
subsetTracks$lengthMeasured > 0 &
subsetTracks$widthMeasured == subsetTracks$lengthMeasured)
sameTracks <- dplyr::inner_join(sameTracks, priorities, by=c('uid' = 'UID'))
sameTracks$delta <- abs(sameTracks$width - sameTracks$length)
averageWidth <- mean(subsetTracks$width)
averageLength <- mean(subsetTracks$length)
manusTracks <- dplyr::filter(subsetTracks, subsetTracks$pes == 0)
manusTracks$widthDelta <- ifelse(
manusTracks$widthMeasured == 0, 0,
abs(manusTracks$width - averageWidth)/manusTracks$widthUncertainty)
manusTracks$widthDelta <- manusTracks$widthDelta/max(manusTracks$widthDelta)
manusTracks$lengthDelta <- ifelse(
manusTracks$lengthMeasured == 0, 0,
abs(manusTracks$length - averageLength)/manusTracks$lengthUncertainty)
manusTracks$lengthDelta <- manusTracks$lengthDelta/max(manusTracks$lengthDelta)
pesTracks <- dplyr::filter(subsetTracks, subsetTracks$pes == 1)
pesTracks$widthDelta <- ifelse(
pesTracks$widthMeasured == 0, 0,
abs(pesTracks$width - averageWidth)/pesTracks$widthUncertainty)
pesTracks$widthDelta <- 2.0*pesTracks$widthDelta/max(pesTracks$widthDelta)
pesTracks$lengthDelta <- ifelse(
pesTracks$lengthMeasured == 0, 0,
abs(pesTracks$length - averageLength)/pesTracks$lengthUncertainty)
pesTracks$lengthDelta <- pesTracks$lengthDelta/max(pesTracks$lengthDelta)
subsetTracks <- rbind(pesTracks, manusTracks)
TRACK_LENGTH_WEIGHT <- 1.0
WIDTH_WEIGHT <- 2.5
LENGTH_WEIGHT <- 2.0
targets <- dplyr::inner_join(priorities, errors, by=c('UID'))
#targets <- dplyr::filter(targets, targets$Preserved == 1 | targets$Cast == 1)
targets <- dplyr::inner_join(targets, subsetTracks, by=c('UID' = 'uid'))
targets$Priority <- targets$Priority/max(targets$Priority)
targets$Priority <- (targets$Width.Deviation + targets$Length.Deviation)*(
TRACK_LENGTH_WEIGHT*targets$Priority +
WIDTH_WEIGHT*targets$lengthDelta +
LENGTH_WEIGHT*targets$widthDelta)
targets$Priority <- targets$Priority/max(targets$Priority)
targets <- dplyr::arrange(targets, dplyr::desc(targets$Priority))
write.csv(targets, 'output/Track_Priorities.csv')
