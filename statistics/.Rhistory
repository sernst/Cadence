incomplete <- dplyr::filter(allTracks, bitwAnd(allTracks$sourceFlags, 1) == 0)
tracks <- dplyr::setdiff(allTracks, hidden)
# Grab non-hidden tracks that
zeroTracks <- dplyr::filter(allTracks, allTracks$width == 0.0 | allTracks$length == 0.0)
tracks <- dplyr::setdiff(tracks, zeroTracks)
manusTracks <- tracks[which(tracks$pes == FALSE), ]
pesTracks <- tracks[which(tracks$pes == TRUE), ]
# [PLOT]: Length vs Width
pdf("output/Length-by-Width.pdf", useDingbats=FALSE)
ggplot(pesTracks, aes(width, length)) + geom_point()
ggplot(manusTracks, aes(width, length)) + geom_point()
# Finalized PDF printing
dev.off()
library(RSQLite)
library(dplyr)
library(ggplot2)
source('src/support/TrackUtils.R')
# Create a connection to the tracks database and load the tracks database table
tracksConn <- RSQLite::dbConnect(RSQLite::SQLite(), dbname="input/tracks.vdb")
allTracks <- RSQLite::dbReadTable(tracksConn, "tracks")
RSQLite::dbDisconnect(tracksConn)
tracksConn <- NULL
# Add the fingerprint to the columns of data
addFingerprints(allTracks)
# Modify the tracks table for analysis
hidden <- dplyr::filter(allTracks, allTracks$hidden == 1)
incomplete <- dplyr::filter(allTracks, bitwAnd(allTracks$sourceFlags, 1) == 0)
tracks <- dplyr::setdiff(allTracks, hidden)
# Grab non-hidden tracks that
zeroTracks <- dplyr::filter(allTracks, allTracks$width == 0.0 | allTracks$length == 0.0)
tracks <- dplyr::setdiff(tracks, zeroTracks)
manusTracks <- tracks[which(tracks$pes == FALSE), ]
pesTracks <- tracks[which(tracks$pes == TRUE), ]
# [PLOT]: Length vs Width
pdf("output/Length-by-Width.pdf", useDingbats=FALSE)
ggplot(pesTracks, aes(width, length)) + geom_point()
ggplot(manusTracks, aes(width, length)) + geom_point()
# Finalized PDF printing
dev.off()
library(RSQLite)
library(dplyr)
library(ggplot2)
source('src/support/TrackUtils.R')
# Create a connection to the tracks database and load the tracks database table
tracksConn <- RSQLite::dbConnect(RSQLite::SQLite(), dbname="input/tracks.vdb")
allTracks <- RSQLite::dbReadTable(tracksConn, "tracks")
RSQLite::dbDisconnect(tracksConn)
tracksConn <- NULL
# Add the fingerprint to the columns of data
allTracks$fingerprint <- generateFingerprints(allTracks)
# Modify the tracks table for analysis
hidden <- dplyr::filter(allTracks, allTracks$hidden == 1)
incomplete <- dplyr::filter(allTracks, bitwAnd(allTracks$sourceFlags, 1) == 0)
tracks <- dplyr::setdiff(allTracks, hidden)
# Grab non-hidden tracks that
zeroTracks <- dplyr::filter(allTracks, allTracks$width == 0.0 | allTracks$length == 0.0)
tracks <- dplyr::setdiff(tracks, zeroTracks)
manusTracks <- tracks[which(tracks$pes == FALSE), ]
pesTracks <- tracks[which(tracks$pes == TRUE), ]
# [PLOT]: Length vs Width
pdf("output/Length-by-Width.pdf", useDingbats=FALSE)
ggplot(pesTracks, aes(width, length)) + geom_point()
ggplot(manusTracks, aes(width, length)) + geom_point()
# Finalized PDF printing
dev.off()
View(allTracks)
View(allTracks)
View(zeroTracks)
View(zeroTracks)
library(RSQLite)
library(dplyr)
library(ggplot2)
source('src/support/TrackUtils.R')
# Create a connection to the tracks database and load the tracks database table
tracksConn <- RSQLite::dbConnect(RSQLite::SQLite(), dbname="input/tracks.vdb")
allTracks <- RSQLite::dbReadTable(tracksConn, "tracks")
RSQLite::dbDisconnect(tracksConn)
tracksConn <- NULL
# Add the fingerprint to the columns of data
allTracks$fingerprint <- generateFingerprints(allTracks)
# Modify the tracks table for analysis
hidden <- dplyr::filter(allTracks, allTracks$hidden == 1)
incomplete <- dplyr::filter(allTracks, bitwAnd(allTracks$sourceFlags, 1) == 0)
tracks <- dplyr::setdiff(allTracks, hidden)
# Grab non-hidden tracks that
zeroTracks <- dplyr::filter(allTracks, allTracks$width == 0.0 | allTracks$length == 0.0)
tracks <- dplyr::setdiff(tracks, zeroTracks)
manusTracks <- tracks[which(tracks$pes == FALSE), ]
pesTracks <- tracks[which(tracks$pes == TRUE), ]
# [PLOT]: Length vs Width
pdf("output/Length-by-Width.pdf", useDingbats=FALSE)
ggplot(pesTracks, aes(width, length)) + geom_point()
ggplot(manusTracks, aes(width, length)) + geom_point()
# Finalized PDF printing
dev.off()
View(zeroTracks)
View(zeroTracks)
system('python initializeStatsEnv.py')
library(RSQLite)
library(dplyr)
library(ggplot2)
source('src/support/TrackUtils.R')
# Create a connection to the tracks database and load the tracks database table
conn <- RSQLite::dbConnect(RSQLite::SQLite(), dbname="input/tracks.vdb")
tracks <- RSQLite::dbReadTable(conn, "tracks")
RSQLite::dbDisconnect(conn)
conn <- RSQLite::dbConnect(RSQLite::SQLite(), dbname="input/analysis.vdb")
analysisTracks <- RSQLite::dbReadTable(conn, "tracks")
RSQLite::dbDisconnect(conn)
conn <- NULL
allTracks <- dplyr::inner_join(tracks, analysisTracks)
# Add the fingerprint to the columns of data
allTracks$fingerprint <- generateFingerprints(allTracks)
# Modify the tracks table for analysis
hidden <- dplyr::filter(allTracks, allTracks$hidden == 1)
incomplete <- dplyr::filter(allTracks, bitwAnd(allTracks$sourceFlags, 1) == 0)
tracks <- dplyr::setdiff(allTracks, hidden)
# Grab non-hidden tracks that
zeroTracks <- dplyr::filter(allTracks, allTracks$width == 0.0 | allTracks$length == 0.0)
tracks <- dplyr::setdiff(tracks, zeroTracks)
manusTracks <- tracks[which(tracks$pes == FALSE), ]
pesTracks <- tracks[which(tracks$pes == TRUE), ]
# [PLOT]: Length vs Width
pdf("output/Length-by-Width.pdf", useDingbats=FALSE)
ggplot(pesTracks, aes(width, length)) + geom_point()
ggplot(manusTracks, aes(width, length)) + geom_point()
# Finalized PDF printing
dev.off()
system2('python', c('initializeStatsEnv.py'))
PATH <- Sys.getenv('PATH')
system2('python', c('initializeStatsEnv.py'), env=c(PATH=PATH))
PATH <- Sys.getenv('PATH')
system2('python', c('initializeStatsEnv.py'), env=c(PATH=PATH))
PYTHON_PATH <- Sys.getenv('PYTHONPATH')
system2('python', c('initializeStatsEnv.py'), env=c(PYTHONPATH=PYTHON_PATH))
PYTHON_PATH <- Sys.getenv('PYTHONPATH')
system2('python', c('initializeStatsEnv.py'), env=c(PYTHONPATH=PYTHON_PATH))
PYTHON_PATH <- Sys.getenv('PYTHONPATH')
Sys.getenv()
system2('source', c('~/.bash_profile'))
Sys.getenv()
library(RSQLite)
library(dplyr)
library(ggplot2)
source('src/support/TrackUtils.R')
# Create a connection to the tracks database and load the tracks database table
conn <- RSQLite::dbConnect(RSQLite::SQLite(), dbname="input/tracks.vdb")
tracks <- RSQLite::dbReadTable(conn, "tracks")
RSQLite::dbDisconnect(conn)
conn <- RSQLite::dbConnect(RSQLite::SQLite(), dbname="input/analysis.vdb")
analysisTracks <- RSQLite::dbReadTable(conn, "tracks")
RSQLite::dbDisconnect(conn)
conn <- NULL
allTracks <- dplyr::inner_join(tracks, analysisTracks)
# Add the fingerprint to the columns of data
allTracks$fingerprint <- generateFingerprints(allTracks)
# Modify the tracks table for analysis
hidden <- dplyr::filter(allTracks, allTracks$hidden == 1)
incomplete <- dplyr::filter(allTracks, bitwAnd(allTracks$sourceFlags, 1) == 0)
tracks <- dplyr::setdiff(allTracks, hidden)
# Grab non-hidden tracks that
zeroTracks <- dplyr::filter(allTracks, allTracks$width == 0.0 | allTracks$length == 0.0)
tracks <- dplyr::setdiff(tracks, zeroTracks)
manusTracks <- tracks[which(tracks$pes == FALSE), ]
pesTracks <- tracks[which(tracks$pes == TRUE), ]
# [PLOT]: Length vs Width
pdf("output/Length-by-Width.pdf", useDingbats=FALSE)
ggplot(pesTracks, aes(width, length)) + geom_point()
ggplot(manusTracks, aes(width, length)) + geom_point()
# Finalized PDF printing
dev.off()
library(RSQLite)
library(dplyr)
library(ggplot2)
source('src/support/TrackUtils.R')
# Create a connection to the tracks database and load the tracks database table
conn <- RSQLite::dbConnect(RSQLite::SQLite(), dbname="input/tracks.vdb")
tracks <- RSQLite::dbReadTable(conn, "tracks")
RSQLite::dbDisconnect(conn)
conn <- RSQLite::dbConnect(RSQLite::SQLite(), dbname="input/analysis.vdb")
analysisTracks <- RSQLite::dbReadTable(conn, "tracks")
RSQLite::dbDisconnect(conn)
conn <- NULL
allTracks <- dplyr::inner_join(tracks, analysisTracks, by=c('uid'))
# Add the fingerprint to the columns of data
allTracks$fingerprint <- generateFingerprints(allTracks)
# Modify the tracks table for analysis
hidden <- dplyr::filter(allTracks, allTracks$hidden == 1)
incomplete <- dplyr::filter(allTracks, bitwAnd(allTracks$sourceFlags, 1) == 0)
tracks <- dplyr::setdiff(allTracks, hidden)
# Grab non-hidden tracks that
zeroTracks <- dplyr::filter(allTracks, allTracks$width == 0.0 | allTracks$length == 0.0)
tracks <- dplyr::setdiff(tracks, zeroTracks)
manusTracks <- tracks[which(tracks$pes == FALSE), ]
pesTracks <- tracks[which(tracks$pes == TRUE), ]
# [PLOT]: Length vs Width
pdf("output/Length-by-Width.pdf", useDingbats=FALSE)
ggplot(pesTracks, aes(width, length)) + geom_point()
ggplot(manusTracks, aes(width, length)) + geom_point()
ggplot(allTracks, aes(length, strideLength)) + geom_point()
# Finalized PDF printing
dev.off()
View(hidden)
View(hidden)
library(RSQLite)
library(dplyr)
library(ggplot2)
source('src/support/TrackUtils.R')
# Create a connection to the tracks database and load the tracks database table
conn <- RSQLite::dbConnect(RSQLite::SQLite(), dbname="input/tracks.vdb")
sourceTracks <- RSQLite::dbReadTable(conn, "tracks")
RSQLite::dbDisconnect(conn)
conn <- RSQLite::dbConnect(RSQLite::SQLite(), dbname="input/analysis.vdb")
analysisTracks <- RSQLite::dbReadTable(conn, "tracks")
RSQLite::dbDisconnect(conn)
conn <- NULL
allTracks <- dplyr::inner_join(sourceTracks, analysisTracks, by=c('uid'))
# Add the fingerprint to the columns of data
allTracks$fingerprint <- generateFingerprints(allTracks)
# Modify the tracks table for analysis
hidden <- dplyr::filter(allTracks, allTracks$hidden == 1)
incomplete <- dplyr::filter(allTracks, bitwAnd(allTracks$sourceFlags, 1) == 0)
tracks <- dplyr::setdiff(allTracks, hidden)
# Grab non-hidden tracks that
zeroTracks <- dplyr::filter(allTracks, allTracks$width == 0.0 | allTracks$length == 0.0)
tracks <- dplyr::setdiff(tracks, zeroTracks)
manusTracks <- tracks[which(tracks$pes == FALSE), ]
pesTracks <- tracks[which(tracks$pes == TRUE), ]
# [PLOT]: Length vs Width
pdf("output/Length-by-Width.pdf", useDingbats=FALSE)
ggplot(pesTracks, aes(width, length)) + geom_point()
ggplot(manusTracks, aes(width, length)) + geom_point()
ggplot(allTracks, aes(length, strideLength)) + geom_point()
# Finalized PDF printing
dev.off()
View(hidden)
View(hidden)
library(RSQLite)
library(dplyr)
library(ggplot2)
source('src/support/TrackUtils.R')
# Create a connection to the tracks database and load the tracks database table
conn <- RSQLite::dbConnect(RSQLite::SQLite(), dbname="input/tracks.vdb")
sourceTracks <- RSQLite::dbReadTable(conn, "tracks")
RSQLite::dbDisconnect(conn)
conn <- RSQLite::dbConnect(RSQLite::SQLite(), dbname="input/analysis.vdb")
analysisTracks <- RSQLite::dbReadTable(conn, "tracks")
RSQLite::dbDisconnect(conn)
conn <- NULL
allTracks <- dplyr::inner_join(sourceTracks, analysisTracks, by=c('uid'))
# Add the fingerprint to the columns of data
allTracks$fingerprint <- generateFingerprints(allTracks)
# Modify the tracks table for analysis
hidden <- dplyr::filter(allTracks, allTracks$hidden == 1)
incomplete <- dplyr::filter(allTracks, bitwAnd(allTracks$sourceFlags, 1) == 0)
tracks <- dplyr::setdiff(allTracks, hidden)
# Grab non-hidden tracks that
zeroTracks <- dplyr::filter(allTracks, allTracks$width == 0.0 | allTracks$length == 0.0)
tracks <- dplyr::setdiff(tracks, zeroTracks)
manusTracks <- tracks[which(tracks$pes == FALSE), ]
pesTracks <- tracks[which(tracks$pes == TRUE), ]
# [PLOT]: Length vs Width
pdf("output/Length-by-Width.pdf", useDingbats=FALSE)
ggplot(pesTracks, aes(width, length)) + geom_point()
ggplot(manusTracks, aes(width, length)) + geom_point()
ggplot(allTracks, aes(strideLength, paceLength)) + geom_point()
# Finalized PDF printing
dev.off()
conn <- RSQLite::dbConnect(RSQLite::SQLite(), dbname="input/tracks.vdb")
sitemaps <- RSQLite::dbReadTable(conn, "sitemaps")
sourceTracks <- RSQLite::dbReadTable(conn, "tracks")
RSQLite::dbDisconnect(conn)
conn <- RSQLite::dbConnect(RSQLite::SQLite(), dbname="input/analysis.vdb")
analysisTracks <- RSQLite::dbReadTable(conn, "tracks")
RSQLite::dbDisconnect(conn)
conn <- NULL
View(sitemaps)
View(sitemaps)
library(RSQLite)
library(dplyr)
library(ggplot2)
source('src/support/TrackUtils.R')
# Create a connection to the tracks database and load the tracks database table
conn <- RSQLite::dbConnect(RSQLite::SQLite(), dbname="input/tracks.vdb")
sitemaps <- RSQLite::dbReadTable(conn, "sitemaps")
sourceTracks <- RSQLite::dbReadTable(conn, "tracks")
RSQLite::dbDisconnect(conn)
conn <- RSQLite::dbConnect(RSQLite::SQLite(), dbname="input/analysis.vdb")
analysisTracks <- RSQLite::dbReadTable(conn, "tracks")
RSQLite::dbDisconnect(conn)
conn <- NULL
allTracks <- dplyr::inner_join(sourceTracks, analysisTracks, by=c('uid'))
# Add the fingerprint to the columns of data
allTracks$fingerprint <- generateFingerprints(allTracks)
# Modify the tracks table for analysis
hidden <- dplyr::filter(allTracks, allTracks$hidden == 1)
incomplete <- dplyr::filter(allTracks, bitwAnd(allTracks$sourceFlags, 1) == 0)
tracks <- dplyr::setdiff(allTracks, hidden)
# Grab non-hidden tracks that
zeroTracks <- dplyr::filter(allTracks, allTracks$width == 0.0 | allTracks$length == 0.0)
tracks <- dplyr::setdiff(tracks, zeroTracks)
manusTracks <- tracks[which(tracks$pes == FALSE), ]
pesTracks <- tracks[which(tracks$pes == TRUE), ]
# [PLOT]: Length vs Width
pdf("output/Length-by-Width.pdf", useDingbats=FALSE)
ggplot(pesTracks, aes(width, length)) + geom_point()
ggplot(manusTracks, aes(width, length)) + geom_point()
ggplot(allTracks, aes(strideLength, paceLength)) + geom_point()
# Finalized PDF printing
dev.off()
View(sitemaps)
View(sitemaps)
library(RSQLite)
library(dplyr)
library(ggplot2)
source('src/support/TrackUtils.R')
# Create a connection to the tracks database and load the tracks database table
conn <- RSQLite::dbConnect(RSQLite::SQLite(), dbname="input/tracks.vdb")
sitemaps <- RSQLite::dbReadTable(conn, "sitemaps")
sourceTracks <- RSQLite::dbReadTable(conn, "tracks")
RSQLite::dbDisconnect(conn)
conn <- RSQLite::dbConnect(RSQLite::SQLite(), dbname="input/analysis.vdb")
analysisTracks <- RSQLite::dbReadTable(conn, "tracks")
RSQLite::dbDisconnect(conn)
conn <- NULL
allTracks <- dplyr::inner_join(sourceTracks, analysisTracks, by=c('uid'))
# Add the fingerprint to the columns of data
allTracks$fingerprint <- generateFingerprints(allTracks)
# Modify the tracks table for analysis
hidden <- dplyr::filter(allTracks, allTracks$hidden == 1)
incomplete <- dplyr::filter(allTracks, bitwAnd(allTracks$sourceFlags, 1) == 0)
tracks <- dplyr::setdiff(allTracks, hidden)
# Grab non-hidden tracks that
zeroTracks <- dplyr::filter(allTracks, allTracks$width == 0.0 | allTracks$length == 0.0)
tracks <- dplyr::setdiff(tracks, zeroTracks)
manusTracks <- tracks[which(tracks$pes == FALSE), ]
pesTracks <- tracks[which(tracks$pes == TRUE), ]
# [PLOT]: Length vs Width
pdf("output/Length-by-Width.pdf", useDingbats=FALSE)
ggplot(pesTracks, aes(width, length)) + geom_point()
ggplot(manusTracks, aes(width, length)) + geom_point()
ggplot(allTracks, aes(strideLength, paceLength)) + geom_point()
ggplot(allTracks, aes(strideLength, simpleGauge)) + geom_point()
# Finalized PDF printing
dev.off()
library(RSQLite)
library(dplyr)
library(ggplot2)
source('src/support/TrackUtils.R')
# Create a connection to the tracks database and load the tracks database table
conn <- RSQLite::dbConnect(RSQLite::SQLite(), dbname="input/tracks.vdb")
sitemaps <- RSQLite::dbReadTable(conn, "sitemaps")
sourceTracks <- RSQLite::dbReadTable(conn, "tracks")
RSQLite::dbDisconnect(conn)
conn <- RSQLite::dbConnect(RSQLite::SQLite(), dbname="input/analysis.vdb")
analysisTracks <- RSQLite::dbReadTable(conn, "tracks")
RSQLite::dbDisconnect(conn)
conn <- NULL
allTracks <- dplyr::inner_join(sourceTracks, analysisTracks, by=c('uid'))
# Add the fingerprint to the columns of data
allTracks$fingerprint <- generateFingerprints(allTracks)
# Modify the tracks table for analysis
hidden <- dplyr::filter(allTracks, allTracks$hidden == 1)
incomplete <- dplyr::filter(allTracks, bitwAnd(allTracks$sourceFlags, 1) == 0)
tracks <- dplyr::setdiff(allTracks, hidden)
# Grab non-hidden tracks that
zeroTracks <- dplyr::filter(allTracks, allTracks$width == 0.0 | allTracks$length == 0.0)
tracks <- dplyr::setdiff(tracks, zeroTracks)
manusTracks <- tracks[which(tracks$pes == FALSE), ]
pesTracks <- tracks[which(tracks$pes == TRUE), ]
# [PLOT]: Length vs Width
pdf("output/Track-Basics.pdf", useDingbats=FALSE)
ggplot(pesTracks, aes(width, length)) + geom_point()
ggplot(manusTracks, aes(width, length)) + geom_point()
ggplot(allTracks, aes(strideLength, paceLength)) + geom_point()
ggplot(allTracks, aes(strideLength, simpleGauge)) + geom_point()
# Finalized PDF printing
dev.off()
library(RSQLite)
library(dplyr)
library(ggplot2)
source('src/support/TrackUtils.R')
# Create a connection to the tracks database and load the tracks database table
conn <- RSQLite::dbConnect(RSQLite::SQLite(), dbname="input/tracks.vdb")
sitemaps <- RSQLite::dbReadTable(conn, "sitemaps")
sourceTracks <- RSQLite::dbReadTable(conn, "tracks")
RSQLite::dbDisconnect(conn)
conn <- RSQLite::dbConnect(RSQLite::SQLite(), dbname="input/analysis.vdb")
analysisTracks <- RSQLite::dbReadTable(conn, "tracks")
RSQLite::dbDisconnect(conn)
conn <- NULL
allTracks <- dplyr::inner_join(sourceTracks, analysisTracks, by=c('uid'))
# Add the fingerprint to the columns of data
allTracks$fingerprint <- generateFingerprints(allTracks)
# Modify the tracks table for analysis
hidden <- dplyr::filter(allTracks, allTracks$hidden == 1)
incomplete <- dplyr::filter(allTracks, bitwAnd(allTracks$sourceFlags, 1) == 0)
tracks <- dplyr::setdiff(allTracks, hidden)
# Grab non-hidden tracks that
zeroTracks <- dplyr::filter(allTracks, allTracks$width == 0.0 | allTracks$length == 0.0)
tracks <- dplyr::setdiff(tracks, zeroTracks)
manusTracks <- tracks[which(tracks$pes == FALSE), ]
pesTracks <- tracks[which(tracks$pes == TRUE), ]
# [PLOT]: Length vs Width
pdf("output/Track-Basics.pdf", useDingbats=FALSE)
ggplot(pesTracks, aes(width, length)) + geom_point()
ggplot(manusTracks, aes(width, length)) + geom_point()
ggplot(allTracks, aes(strideLength, paceLength)) + geom_point()
ggplot(allTracks, aes(strideLength, simpleGauge)) + geom_point()
# Finalized PDF printing
dev.off()
library(RSQLite)
library(dplyr)
library(ggplot2)
source('src/support/TrackUtils.R')
# Create a connection to the tracks database and load the tracks database table
conn <- RSQLite::dbConnect(RSQLite::SQLite(), dbname="input/tracks.vdb")
sitemaps <- RSQLite::dbReadTable(conn, "sitemaps")
sourceTracks <- RSQLite::dbReadTable(conn, "tracks")
RSQLite::dbDisconnect(conn)
conn <- RSQLite::dbConnect(RSQLite::SQLite(), dbname="input/analysis.vdb")
analysisTracks <- RSQLite::dbReadTable(conn, "tracks")
RSQLite::dbDisconnect(conn)
conn <- NULL
allTracks <- dplyr::inner_join(sourceTracks, analysisTracks, by=c('uid'))
# Add the fingerprint to the columns of data
allTracks$fingerprint <- generateFingerprints(allTracks)
# Modify the tracks table for analysis
hidden <- dplyr::filter(allTracks, allTracks$hidden == 1)
incomplete <- dplyr::filter(allTracks, bitwAnd(allTracks$sourceFlags, 1) == 0)
tracks <- dplyr::setdiff(allTracks, hidden)
# Grab non-hidden tracks that
zeroTracks <- dplyr::filter(allTracks, allTracks$width == 0.0 | allTracks$length == 0.0)
tracks <- dplyr::setdiff(tracks, zeroTracks)
manusTracks <- tracks[which(tracks$pes == FALSE), ]
pesTracks <- tracks[which(tracks$pes == TRUE), ]
# [PLOT]: Length vs Width
pdf("output/Track-Basics.pdf", useDingbats=FALSE)
ggplot(pesTracks, aes(width, length)) + geom_point()
ggplot(manusTracks, aes(width, length)) + geom_point()
ggplot(allTracks, aes(strideLength, paceLength)) + geom_point()
ggplot(allTracks, aes(strideLength, simpleGauge)) + geom_point()
ggplot(allTracks, aes(width, strideLength)) + geom_point()
# Finalized PDF printing
dev.off()
library(RSQLite)
library(dplyr)
library(ggplot2)
source('src/support/TrackUtils.R')
# Create a connection to the tracks database and load the tracks database table
conn <- RSQLite::dbConnect(RSQLite::SQLite(), dbname="input/tracks.vdb")
sitemaps <- RSQLite::dbReadTable(conn, "sitemaps")
sourceTracks <- RSQLite::dbReadTable(conn, "tracks")
RSQLite::dbDisconnect(conn)
conn <- RSQLite::dbConnect(RSQLite::SQLite(), dbname="input/analysis.vdb")
analysisTracks <- RSQLite::dbReadTable(conn, "tracks")
RSQLite::dbDisconnect(conn)
conn <- NULL
allTracks <- dplyr::inner_join(sourceTracks, analysisTracks, by=c('uid'))
# Add the fingerprint to the columns of data
allTracks$fingerprint <- generateFingerprints(allTracks)
# Modify the tracks table for analysis
hidden <- dplyr::filter(allTracks, allTracks$hidden == 1)
incomplete <- dplyr::filter(allTracks, bitwAnd(allTracks$sourceFlags, 1) == 0)
tracks <- dplyr::setdiff(allTracks, hidden)
# Grab non-hidden tracks that
zeroTracks <- dplyr::filter(allTracks, allTracks$width == 0.0 | allTracks$length == 0.0)
tracks <- dplyr::setdiff(tracks, zeroTracks)
manusTracks <- tracks[which(tracks$pes == FALSE), ]
pesTracks <- tracks[which(tracks$pes == TRUE), ]
# [PLOT]: Length vs Width
pdf("output/Track-Basics.pdf", useDingbats=FALSE)
ggplot(pesTracks, aes(width, length)) + geom_point()
ggplot(manusTracks, aes(width, length)) + geom_point()
ggplot(allTracks, aes(strideLength, paceLength)) + geom_point()
ggplot(allTracks, aes(strideLength, simpleGauge)) + geom_point()
ggplot(allTracks, aes(width, strideLength)) + geom_point()
ggplot(allTracks, aes(width, simpleGauge)) + geom_point()
# Finalized PDF printing
dev.off()
View(allTracks)
View(allTracks)
library(dplyr)
priorities <- read.csv("/Users/scott/Dropbox/a16/Analysis/StatisticsAnalyzer/Track-Priority.csv")
errors <- read.csv("/Users/scott/Dropbox/a16/Analysis/ComparisonAnalyzer/Error-Deviations.csv")
targets <- dplyr::inner_join(errors, priorities, by=c("uid"))
library(dplyr)
priorities <- read.csv("/Users/scott/Dropbox/a16/Analysis/StatisticsAnalyzer/Track-Priority.csv")
errors <- read.csv("/Users/scott/Dropbox/a16/Analysis/ComparisonAnalyzer/Error-Deviations.csv")
targets <- dplyr::inner_join(priorities, errors, by=c('uid'))
View(errors)
View(priorities)
library(dplyr)
priorities <- read.csv("/Users/scott/Dropbox/a16/Analysis/StatisticsAnalyzer/Track-Priority.csv")
errors <- read.csv("/Users/scott/Dropbox/a16/Analysis/ComparisonAnalyzer/Error-Deviations.csv")
targets <- dplyr::inner_join(priorities, errors, by=c('uid' = 'uid'))
View(priorities)
View(priorities)
View(errors)
View(errors)
View(errors)
View(errors)
View(priorities)
View(priorities)
targets <- dplyr::inner_join(priorities, errors, by=c('UID' = 'UID'))
targets <- dplyr::inner_join(priorities, errors, by=c('UID'))
View(targets)
View(targets)
targets <- dplyr::filter(targets, targets$Preserved == 1 | targets$Cast == 1)
View(targets)
View(targets)
write.csv2(targets, 'output/Track_Priorities.csv')
